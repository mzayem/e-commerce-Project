// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}


model Store {
  id           String      @id @default(uuid())
  name         String
  userId       String
  billboards   Billboard[] @relation("StoreToBillboard")
  categories   Category[]  @relation("StoreToCategory")
  storages     Storage[]    @relation("StoreToStorage")
  colors       Color[]     @relation("StoreToColor")
  products     Product[]   @relation("StoreToProduct")
  orders       Order[]     @relation("StoretoOrder")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}


model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String  
  imageUrl    String  
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}


model Category {
  id           String      @id @default(uuid())
  storeId      String
  store        Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId  String
  billboard    Billboard   @relation(fields: [billboardId], references: [id])
  Products     Product[]   @relation("CategoryToProduct")
  name         String  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}


model Storage {
  id           String      @id @default(uuid())
  storeId      String
  store        Store       @relation("StoreToStorage", fields: [storeId], references: [id])
  products     Product[]   @relation("StoragetoProduct")
  name         String  
  value        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id           String      @id @default(uuid())
  storeId      String
  store        Store       @relation("StoreToColor", fields: [storeId], references: [id])
  products     Product[]   @relation("ColortoProduct")
  name         String  
  value        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id           String      @id @default(uuid())
  storeId      String
  store        Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId   String
  category     Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name         String  
  price        Decimal
  description  String      @default("")
  isFeatured   Boolean     @default(false)
  isArchived   Boolean     @default(false)
  storageId    String
  storage      Storage      @relation("StoragetoProduct" , fields: [storageId] , references: [id])
  colorId      String
  color        Color       @relation("ColortoProduct" , fields: [colorId] , references: [id])
  images       Image[]
  orderitems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([storageId])
  @@index([colorId])
}

model Image {
  id           String      @id @default(uuid())
  productId    String
  product      Product     @relation(fields: [productId] , references: [id] , onDelete: Cascade)
  url          String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([productId])
}


model Order {
  id           String      @id @default(uuid())
  storeId      String
  store        Store       @relation("StoretoOrder", fields: [storeId], references: [id])
  orderItems   OrderItem[]
  isPaid       Boolean     @default(false)
  CustomerName String      @default("")
  email        String       @default("")
  phone        String      @default("")
  address      String     @default("")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
 id           String      @id @default(uuid())
 orderId      String
 order        Order       @relation(fields: [orderId], references: [id])
 productId    String      
 product      Product     @relation(fields: [productId], references: [id])

@@index([orderId])
@@index([productId])
}